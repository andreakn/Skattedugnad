<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".log" #>
<#@ include file="Config\Tools\NConfigStitch.ttinclude"  #><#
var setup = new Dictionary<string, string[]>();
string inputFilesRelativeRootPaths = @"\";
string outputFilesRelativeRootPath = @"\"; 


//////////////////////////////////////////////////////////////
/// 
/// see here for detailed explanation: 
/// http://ilearnable.net/2010/08/02/t4-for-complex-configuration/
/// 
//Configure the configuration generation process like this:
//setup[<outputfilename>] = new []{<input1>,<input2>,<input3>,..};
// 
// configs are merged in the order given (input 3 overrides input 2, which overrides input1)
//
// make your modifications below here 
//////////////////////////////////////////////////////////////

inputFilesRelativeRootPaths = @"\config\input";  

//local configuration. 
//Make sure that you don't check the resulting web.config file into source control as this will result in merge conflicts with other developers
setup["web.config"] = new []{@"web.root.config",@"web.dev.config", @"web.dev.local.config"};

//
//  If you want to be able to individually change the recipe for the local web.config so that each developer use their own recipe
//  you can uncomment the following code and create a local file (not checked into source control) called NConfigStitch.tt.localoverride.txt
//  which contains the recipe you want. (either comma separated list of file names or one filename per line)
//

//string localConfigOverridePath = System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + @"\NConfigStitch.tt.localoverride.txt";
//if(System.IO.File.Exists(localConfigOverridePath))
//{
//	string[] overrides = System.IO.File.ReadAllText(localConfigOverridePath).Replace(" ", "").Replace(",","").Replace("\n", ",").Replace("\r","").Split(',');
//	if(!(overrides.Length==1&&string.IsNullOrEmpty(overrides[0])))
//	{
//		//setup["web.config"] = overrides;
//	}
//}



setup[@"\config\output\web.test.config"] = new []{@"web.root.config",@"web.test.config"};
setup[@"\config\output\web.prod.config"] = new []{@"web.root.config",@"web.prod.config"};

 
////////////////////////////////////////////////////////////////
//End of custom configuration, the rest is just static stuff:
////////////////////////////////////////////////////////////////

var configs = MergeConfigFiles(inputFilesRelativeRootPaths, outputFilesRelativeRootPath, setup);
var manager = CodegenManager.Create(Host, GenerationEnvironment);
foreach(var filepath in configs.Keys){
	var dirName = System.IO.Path.GetDirectoryName(this.Host.TemplateFile)+filepath;
	EnsureDirectory(new System.IO.DirectoryInfo(dirName.Substring(0,dirName.LastIndexOf('\\'))));
	manager.StartNewFile(dirName);
	#><#= configs[filepath] #><#
	manager.EndBlock();
}
manager.Process(true);
#>
<#+ 
public static void EnsureDirectory(System.IO.DirectoryInfo oDirInfo) 
{ 
    if (oDirInfo.Parent != null) 
        EnsureDirectory(oDirInfo.Parent); 
    if (!oDirInfo.Exists) 
    { 
        oDirInfo.Create(); 
    } 
} 
#>